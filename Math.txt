/*
    Day1:

    minimum number of shovels:
    (numberOfShovels * price % 10 == 0) || (numberOfShovels * price % 10 == coin)

    Important:
    probability of an event = number of ways it can happen / total number of outcomes

    be careful with the overflow
*/


/*
    UVA light, more light
    if n == 10

    he toggle the switch on the 1, 2, 5 and 10 -> the factors of 10

    intialy the bulb is off and if n == 10 we have four factors (even number)

    at factor 1 -> on
    at factor 2 -> off
    at factor 3 -> on
    at factor 4 -> off


    if n == 4

    he toggle the switch on the 1, 2 and 4 -> the factors of 4
    we have 3 factors (odd number)

    at factor 1 -> on
    at factor 2 -> off
    at factor 3 -> on

    so if the numbe of factors of n is even the last bulb is off
    otherwise is on

    so we need to know the factors of n
    the number of factors of any number is even but, if the number is sqrt so the factors of it is odd

    10
    1 * 10
    2 * 5

    4
    1 * 4
    2 * 2
*/

 /*

  if we have a sorted array and we need the max and min distance between element 
  max distance = max(abs(arr[i] - arr[0]), abs(arr[i] - arr[n - 1]))
  min distance = min(abs(arr[i] - arr[i - 1]), abs(arr[i] - arr[i + 1]))

*/

/*
   
    The Idea of Efficient Exponentiation (Power)

    A^p = A^p-1 * A (if p is odd)
    A^p = (A^p/2)^2 (if p is even)

    O(log(p))

*/

/*

  sum of even numbers from 1 to n
  number of even number * (number of even number + 1)

  sum of odd number from 1 to n
  number of odd numbers * pow(number of odd numbers, 2)
*/

/*
  
  Distance between two points: (x0, y0), (x1, y1)

  sqrt(pow((x1 - x0), 2) + pow((y1 - y0), 2))

  time = distance / speed

*/

*/
  
  Interior angle = (180 * (n-2)) / n

  n = 360 / (180 - a)
/*